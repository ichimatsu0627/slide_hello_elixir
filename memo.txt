# はじめてのElixir
それでは、「はじめてのElixir」ということで始めさせていただきます。

# 自己紹介
その前に軽く自己紹介をさせていただきます。
なまえは、マツモトリョウタ と申します。
クローバーラボ株式会社、技術部所属です。

2013年に新卒として入社しまして、現在はゆるドラシルの運営開発をしています。

# 経緯
まずElixirを使うことになったきっかけが、

# きっかけ
チャットサーバーを作って欲しいという内容でした。
「マイクロサービスであれば自由にしてもらっていいけど、どうせならFirebaseとか使わず自分で作って」というものでした。

僕自身、チャットサーバーを作るのは未経験だった為、言語選定からSocket間通信に関する情報を色々調べましたが
最終的には、同僚がElixirの経験があり「わかんなかったら手伝うし！」という言葉をお守りにしてElixirで開始したのが経緯になります。

# Elixirとは

Elixirとは、
Erlang仮想環境上で動作する関数型プログラミング言語です。
Elixirでは、プロセス上でコードが実行される為、比較的軽量でスケールしやすく、
他プロセスを監視し再起動など行うスーパーバイザー機能を使うことで耐障害性の高いアプリケーションを作りやすくなっています。

また、個人的には、文法がかなりRubyを意識しているように思えました。
iexという対話モードが用意されており重宝しました。

今回は6年間ほぼPHP漬けになっていたペチパーが、そのElixirに感動した機能をいくつか紹介するお話をさせていただきます。

# not 代入

Elixirでは変数に値を入れる事を、代入では無く、束縛(bind)と言います
代入とは、「式中の文字に、ある特定の値を与えること。」ですが、束縛(bind)は、「値に対して、ラベルを貼り付けること。」です

すでに束縛(bind)済みの変数が別の値を束縛(bind)した場合、変数名側が参照先を変え、後者の値を束縛(bind)をすることになります
ラベルとしての変数が参照先を変えただけの為、メモリには値が残ります

# パターンマッチ

Elixirでは、= のことをマッチ演算子と呼び、マッチ演算子を用いた式が等式として成り立つように束縛されます
パターンマッチは式だけで無く、関数の呼び出しについても用いられます。

# 関数

関数はreturnを使わず、最後の行をreturnとして扱います
そして、条件さえ満たせば、同名の関数を作る事が出来ます。

## 同名の関数 - Arity -

1つ目は、引数の数です。
Elixirでは、引数の数が違えば同名でも別関数として扱ってくれます。

## 同名の関数 - パターンマッチ -

そして次に、パターンマッチです。
待ち受ける引数を固定またはパターンを指定し、それが一致する関数を実行するというものです。
一致し次第、先に定義されたものを優先的に実行します。

## 同名の関数 - ガード-

そしてガードによる軽いハンドリングも可能です。
しかし、ここではユーザー定義の関数が気軽に使えない為、わりと不便に感じました。

# 関数型言語

Elixirは関数型プログラミング言語の為、パイプ (|>) を利用することでメソッドチェーンを行えます。
関数パイプと同名関数の分岐を上手く利用することで、簡単に見やすいコードを書くことが出来す。

こちらの例では、Arityとパターンマッチを利用したバリデートを行っています。

# 並行性

また、Elixirでは並行処理が簡単に実装可能になっています。
シンプルな例として、spawn関数を使えばこの例のような非同期な処理が行えます。
またErlangVM内のプロセスが軽量なのも注目すべき点だと思います。

# Elixirを使うメリット

Elixirを使うメリットとして、先ほどの「Elixirとは」の項で紹介した、

プロセスを増やすことで簡単にスケールアップが出来る点、
スーパーバイザーを使うことで、障害に強いフォールトトレラントなアプリケーションを作ることが出来る点、
任天堂Swintchのプッシュ通知などで採用されているほどErlang VMが落ちにくい点などがあります。

また、Elixirを使ったウェブアプリケーション開発を行う際はPhoenixが採用されるケースが多く
リアルタイムウェブアプリケーションを作ることに特化しているように感じました。
チャットサーバーを作る際もWebSocket周りは簡単に実装できました。

# 使ってみた所感

今回ずっとPHPをやってきた僕がElixirを使ってみて感じたことしては、
シンプルに関数型言語は楽しく新鮮に感じました。
パズルを組み立てていく感覚に近く、パターンマッチがより一層そう感じさせたような気がします。
そして、今まで避け気味だった並行処理、軽量プロセスなどもかなりシンプルに書くこと出来ました。

一方でまだ日本語の記事が少なくラーニングには苦戦しました。
それでもやはり新しいものを学ぶのは心地よい刺激でした。
もし、新しい事をしたいが、まだPHPから抜け出せない方がおられましたら是非Elixir、お試しください

# ありがとうございました

本日はご静聴いただきありがとうございました
